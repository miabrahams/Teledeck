// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: AI/proto/ai_server.proto

package ai_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ImageScorer_PredictUrl_FullMethodName = "/image_scorer.ImageScorer/PredictUrl"
	ImageScorer_TagUrl_FullMethodName     = "/image_scorer.ImageScorer/TagUrl"
)

// ImageScorerClient is the client API for ImageScorer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageScorerClient interface {
	PredictUrl(ctx context.Context, in *ImageUrlRequest, opts ...grpc.CallOption) (*ScoreResult, error)
	TagUrl(ctx context.Context, in *TagImageUrlRequest, opts ...grpc.CallOption) (*TagResult, error)
}

type imageScorerClient struct {
	cc grpc.ClientConnInterface
}

func NewImageScorerClient(cc grpc.ClientConnInterface) ImageScorerClient {
	return &imageScorerClient{cc}
}

func (c *imageScorerClient) PredictUrl(ctx context.Context, in *ImageUrlRequest, opts ...grpc.CallOption) (*ScoreResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScoreResult)
	err := c.cc.Invoke(ctx, ImageScorer_PredictUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageScorerClient) TagUrl(ctx context.Context, in *TagImageUrlRequest, opts ...grpc.CallOption) (*TagResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TagResult)
	err := c.cc.Invoke(ctx, ImageScorer_TagUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageScorerServer is the server API for ImageScorer service.
// All implementations must embed UnimplementedImageScorerServer
// for forward compatibility.
type ImageScorerServer interface {
	PredictUrl(context.Context, *ImageUrlRequest) (*ScoreResult, error)
	TagUrl(context.Context, *TagImageUrlRequest) (*TagResult, error)
	mustEmbedUnimplementedImageScorerServer()
}

// UnimplementedImageScorerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedImageScorerServer struct{}

func (UnimplementedImageScorerServer) PredictUrl(context.Context, *ImageUrlRequest) (*ScoreResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PredictUrl not implemented")
}
func (UnimplementedImageScorerServer) TagUrl(context.Context, *TagImageUrlRequest) (*TagResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagUrl not implemented")
}
func (UnimplementedImageScorerServer) mustEmbedUnimplementedImageScorerServer() {}
func (UnimplementedImageScorerServer) testEmbeddedByValue()                     {}

// UnsafeImageScorerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageScorerServer will
// result in compilation errors.
type UnsafeImageScorerServer interface {
	mustEmbedUnimplementedImageScorerServer()
}

func RegisterImageScorerServer(s grpc.ServiceRegistrar, srv ImageScorerServer) {
	// If the following call pancis, it indicates UnimplementedImageScorerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ImageScorer_ServiceDesc, srv)
}

func _ImageScorer_PredictUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageScorerServer).PredictUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageScorer_PredictUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageScorerServer).PredictUrl(ctx, req.(*ImageUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageScorer_TagUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagImageUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageScorerServer).TagUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageScorer_TagUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageScorerServer).TagUrl(ctx, req.(*TagImageUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImageScorer_ServiceDesc is the grpc.ServiceDesc for ImageScorer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageScorer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "image_scorer.ImageScorer",
	HandlerType: (*ImageScorerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PredictUrl",
			Handler:    _ImageScorer_PredictUrl_Handler,
		},
		{
			MethodName: "TagUrl",
			Handler:    _ImageScorer_TagUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "AI/proto/ai_server.proto",
}
