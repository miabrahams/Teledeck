// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package ai_server

import (
	"context"
	"teledeck/internal/genproto/ai_server"

	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockImageScorerClient creates a new instance of MockImageScorerClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockImageScorerClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockImageScorerClient {
	mock := &MockImageScorerClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockImageScorerClient is an autogenerated mock type for the ImageScorerClient type
type MockImageScorerClient struct {
	mock.Mock
}

type MockImageScorerClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockImageScorerClient) EXPECT() *MockImageScorerClient_Expecter {
	return &MockImageScorerClient_Expecter{mock: &_m.Mock}
}

// PredictUrl provides a mock function for the type MockImageScorerClient
func (_mock *MockImageScorerClient) PredictUrl(ctx context.Context, in *ai_server.ImageUrlRequest, opts ...grpc.CallOption) (*ai_server.ScoreResult, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for PredictUrl")
	}

	var r0 *ai_server.ScoreResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ai_server.ImageUrlRequest, ...grpc.CallOption) (*ai_server.ScoreResult, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ai_server.ImageUrlRequest, ...grpc.CallOption) *ai_server.ScoreResult); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ai_server.ScoreResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ai_server.ImageUrlRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockImageScorerClient_PredictUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PredictUrl'
type MockImageScorerClient_PredictUrl_Call struct {
	*mock.Call
}

// PredictUrl is a helper method to define mock.On call
//   - ctx context.Context
//   - in *ai_server.ImageUrlRequest
//   - opts ...grpc.CallOption
func (_e *MockImageScorerClient_Expecter) PredictUrl(ctx interface{}, in interface{}, opts ...interface{}) *MockImageScorerClient_PredictUrl_Call {
	return &MockImageScorerClient_PredictUrl_Call{Call: _e.mock.On("PredictUrl",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockImageScorerClient_PredictUrl_Call) Run(run func(ctx context.Context, in *ai_server.ImageUrlRequest, opts ...grpc.CallOption)) *MockImageScorerClient_PredictUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ai_server.ImageUrlRequest
		if args[1] != nil {
			arg1 = args[1].(*ai_server.ImageUrlRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockImageScorerClient_PredictUrl_Call) Return(scoreResult *ai_server.ScoreResult, err error) *MockImageScorerClient_PredictUrl_Call {
	_c.Call.Return(scoreResult, err)
	return _c
}

func (_c *MockImageScorerClient_PredictUrl_Call) RunAndReturn(run func(ctx context.Context, in *ai_server.ImageUrlRequest, opts ...grpc.CallOption) (*ai_server.ScoreResult, error)) *MockImageScorerClient_PredictUrl_Call {
	_c.Call.Return(run)
	return _c
}

// TagUrl provides a mock function for the type MockImageScorerClient
func (_mock *MockImageScorerClient) TagUrl(ctx context.Context, in *ai_server.TagImageUrlRequest, opts ...grpc.CallOption) (*ai_server.TagResult, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for TagUrl")
	}

	var r0 *ai_server.TagResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ai_server.TagImageUrlRequest, ...grpc.CallOption) (*ai_server.TagResult, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ai_server.TagImageUrlRequest, ...grpc.CallOption) *ai_server.TagResult); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ai_server.TagResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ai_server.TagImageUrlRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockImageScorerClient_TagUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagUrl'
type MockImageScorerClient_TagUrl_Call struct {
	*mock.Call
}

// TagUrl is a helper method to define mock.On call
//   - ctx context.Context
//   - in *ai_server.TagImageUrlRequest
//   - opts ...grpc.CallOption
func (_e *MockImageScorerClient_Expecter) TagUrl(ctx interface{}, in interface{}, opts ...interface{}) *MockImageScorerClient_TagUrl_Call {
	return &MockImageScorerClient_TagUrl_Call{Call: _e.mock.On("TagUrl",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockImageScorerClient_TagUrl_Call) Run(run func(ctx context.Context, in *ai_server.TagImageUrlRequest, opts ...grpc.CallOption)) *MockImageScorerClient_TagUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ai_server.TagImageUrlRequest
		if args[1] != nil {
			arg1 = args[1].(*ai_server.TagImageUrlRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockImageScorerClient_TagUrl_Call) Return(tagResult *ai_server.TagResult, err error) *MockImageScorerClient_TagUrl_Call {
	_c.Call.Return(tagResult, err)
	return _c
}

func (_c *MockImageScorerClient_TagUrl_Call) RunAndReturn(run func(ctx context.Context, in *ai_server.TagImageUrlRequest, opts ...grpc.CallOption) (*ai_server.TagResult, error)) *MockImageScorerClient_TagUrl_Call {
	_c.Call.Return(run)
	return _c
}
