// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package ai_server

import (
	"context"
	"teledeck/internal/genproto/ai_server"

	mock "github.com/stretchr/testify/mock"
)

// NewMockImageScorerServer creates a new instance of MockImageScorerServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockImageScorerServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockImageScorerServer {
	mock := &MockImageScorerServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockImageScorerServer is an autogenerated mock type for the ImageScorerServer type
type MockImageScorerServer struct {
	mock.Mock
}

type MockImageScorerServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockImageScorerServer) EXPECT() *MockImageScorerServer_Expecter {
	return &MockImageScorerServer_Expecter{mock: &_m.Mock}
}

// PredictUrl provides a mock function for the type MockImageScorerServer
func (_mock *MockImageScorerServer) PredictUrl(context1 context.Context, imageUrlRequest *ai_server.ImageUrlRequest) (*ai_server.ScoreResult, error) {
	ret := _mock.Called(context1, imageUrlRequest)

	if len(ret) == 0 {
		panic("no return value specified for PredictUrl")
	}

	var r0 *ai_server.ScoreResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ai_server.ImageUrlRequest) (*ai_server.ScoreResult, error)); ok {
		return returnFunc(context1, imageUrlRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ai_server.ImageUrlRequest) *ai_server.ScoreResult); ok {
		r0 = returnFunc(context1, imageUrlRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ai_server.ScoreResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ai_server.ImageUrlRequest) error); ok {
		r1 = returnFunc(context1, imageUrlRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockImageScorerServer_PredictUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PredictUrl'
type MockImageScorerServer_PredictUrl_Call struct {
	*mock.Call
}

// PredictUrl is a helper method to define mock.On call
//   - context1 context.Context
//   - imageUrlRequest *ai_server.ImageUrlRequest
func (_e *MockImageScorerServer_Expecter) PredictUrl(context1 interface{}, imageUrlRequest interface{}) *MockImageScorerServer_PredictUrl_Call {
	return &MockImageScorerServer_PredictUrl_Call{Call: _e.mock.On("PredictUrl", context1, imageUrlRequest)}
}

func (_c *MockImageScorerServer_PredictUrl_Call) Run(run func(context1 context.Context, imageUrlRequest *ai_server.ImageUrlRequest)) *MockImageScorerServer_PredictUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ai_server.ImageUrlRequest
		if args[1] != nil {
			arg1 = args[1].(*ai_server.ImageUrlRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockImageScorerServer_PredictUrl_Call) Return(scoreResult *ai_server.ScoreResult, err error) *MockImageScorerServer_PredictUrl_Call {
	_c.Call.Return(scoreResult, err)
	return _c
}

func (_c *MockImageScorerServer_PredictUrl_Call) RunAndReturn(run func(context1 context.Context, imageUrlRequest *ai_server.ImageUrlRequest) (*ai_server.ScoreResult, error)) *MockImageScorerServer_PredictUrl_Call {
	_c.Call.Return(run)
	return _c
}

// TagUrl provides a mock function for the type MockImageScorerServer
func (_mock *MockImageScorerServer) TagUrl(context1 context.Context, tagImageUrlRequest *ai_server.TagImageUrlRequest) (*ai_server.TagResult, error) {
	ret := _mock.Called(context1, tagImageUrlRequest)

	if len(ret) == 0 {
		panic("no return value specified for TagUrl")
	}

	var r0 *ai_server.TagResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ai_server.TagImageUrlRequest) (*ai_server.TagResult, error)); ok {
		return returnFunc(context1, tagImageUrlRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ai_server.TagImageUrlRequest) *ai_server.TagResult); ok {
		r0 = returnFunc(context1, tagImageUrlRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ai_server.TagResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ai_server.TagImageUrlRequest) error); ok {
		r1 = returnFunc(context1, tagImageUrlRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockImageScorerServer_TagUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagUrl'
type MockImageScorerServer_TagUrl_Call struct {
	*mock.Call
}

// TagUrl is a helper method to define mock.On call
//   - context1 context.Context
//   - tagImageUrlRequest *ai_server.TagImageUrlRequest
func (_e *MockImageScorerServer_Expecter) TagUrl(context1 interface{}, tagImageUrlRequest interface{}) *MockImageScorerServer_TagUrl_Call {
	return &MockImageScorerServer_TagUrl_Call{Call: _e.mock.On("TagUrl", context1, tagImageUrlRequest)}
}

func (_c *MockImageScorerServer_TagUrl_Call) Run(run func(context1 context.Context, tagImageUrlRequest *ai_server.TagImageUrlRequest)) *MockImageScorerServer_TagUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ai_server.TagImageUrlRequest
		if args[1] != nil {
			arg1 = args[1].(*ai_server.TagImageUrlRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockImageScorerServer_TagUrl_Call) Return(tagResult *ai_server.TagResult, err error) *MockImageScorerServer_TagUrl_Call {
	_c.Call.Return(tagResult, err)
	return _c
}

func (_c *MockImageScorerServer_TagUrl_Call) RunAndReturn(run func(context1 context.Context, tagImageUrlRequest *ai_server.TagImageUrlRequest) (*ai_server.TagResult, error)) *MockImageScorerServer_TagUrl_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedImageScorerServer provides a mock function for the type MockImageScorerServer
func (_mock *MockImageScorerServer) mustEmbedUnimplementedImageScorerServer() {
	_mock.Called()
	return
}

// MockImageScorerServer_mustEmbedUnimplementedImageScorerServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedImageScorerServer'
type MockImageScorerServer_mustEmbedUnimplementedImageScorerServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedImageScorerServer is a helper method to define mock.On call
func (_e *MockImageScorerServer_Expecter) mustEmbedUnimplementedImageScorerServer() *MockImageScorerServer_mustEmbedUnimplementedImageScorerServer_Call {
	return &MockImageScorerServer_mustEmbedUnimplementedImageScorerServer_Call{Call: _e.mock.On("mustEmbedUnimplementedImageScorerServer")}
}

func (_c *MockImageScorerServer_mustEmbedUnimplementedImageScorerServer_Call) Run(run func()) *MockImageScorerServer_mustEmbedUnimplementedImageScorerServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockImageScorerServer_mustEmbedUnimplementedImageScorerServer_Call) Return() *MockImageScorerServer_mustEmbedUnimplementedImageScorerServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockImageScorerServer_mustEmbedUnimplementedImageScorerServer_Call) RunAndReturn(run func()) *MockImageScorerServer_mustEmbedUnimplementedImageScorerServer_Call {
	_c.Run(run)
	return _c
}
