// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package store

import (
	"teledeck/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// NewMockUserStore creates a new instance of MockUserStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserStore {
	mock := &MockUserStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserStore is an autogenerated mock type for the UserStore type
type MockUserStore struct {
	mock.Mock
}

type MockUserStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserStore) EXPECT() *MockUserStore_Expecter {
	return &MockUserStore_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function for the type MockUserStore
func (_mock *MockUserStore) CreateUser(email string, password string) error {
	ret := _mock.Called(email, password)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(email, password)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserStore_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockUserStore_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - email string
//   - password string
func (_e *MockUserStore_Expecter) CreateUser(email interface{}, password interface{}) *MockUserStore_CreateUser_Call {
	return &MockUserStore_CreateUser_Call{Call: _e.mock.On("CreateUser", email, password)}
}

func (_c *MockUserStore_CreateUser_Call) Run(run func(email string, password string)) *MockUserStore_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserStore_CreateUser_Call) Return(err error) *MockUserStore_CreateUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserStore_CreateUser_Call) RunAndReturn(run func(email string, password string) error) *MockUserStore_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function for the type MockUserStore
func (_mock *MockUserStore) GetUser(email string) (*models.User, error) {
	ret := _mock.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *models.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*models.User, error)); ok {
		return returnFunc(email)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *models.User); ok {
		r0 = returnFunc(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserStore_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockUserStore_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - email string
func (_e *MockUserStore_Expecter) GetUser(email interface{}) *MockUserStore_GetUser_Call {
	return &MockUserStore_GetUser_Call{Call: _e.mock.On("GetUser", email)}
}

func (_c *MockUserStore_GetUser_Call) Run(run func(email string)) *MockUserStore_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserStore_GetUser_Call) Return(user *models.User, err error) *MockUserStore_GetUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserStore_GetUser_Call) RunAndReturn(run func(email string) (*models.User, error)) *MockUserStore_GetUser_Call {
	_c.Call.Return(run)
	return _c
}
