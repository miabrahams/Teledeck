// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package store

import (
	"teledeck/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// NewMockSessionStore creates a new instance of MockSessionStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSessionStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSessionStore {
	mock := &MockSessionStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSessionStore is an autogenerated mock type for the SessionStore type
type MockSessionStore struct {
	mock.Mock
}

type MockSessionStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSessionStore) EXPECT() *MockSessionStore_Expecter {
	return &MockSessionStore_Expecter{mock: &_m.Mock}
}

// CreateSession provides a mock function for the type MockSessionStore
func (_mock *MockSessionStore) CreateSession(session *models.Session) (*models.Session, error) {
	ret := _mock.Called(session)

	if len(ret) == 0 {
		panic("no return value specified for CreateSession")
	}

	var r0 *models.Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*models.Session) (*models.Session, error)); ok {
		return returnFunc(session)
	}
	if returnFunc, ok := ret.Get(0).(func(*models.Session) *models.Session); ok {
		r0 = returnFunc(session)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*models.Session) error); ok {
		r1 = returnFunc(session)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionStore_CreateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSession'
type MockSessionStore_CreateSession_Call struct {
	*mock.Call
}

// CreateSession is a helper method to define mock.On call
//   - session *models.Session
func (_e *MockSessionStore_Expecter) CreateSession(session interface{}) *MockSessionStore_CreateSession_Call {
	return &MockSessionStore_CreateSession_Call{Call: _e.mock.On("CreateSession", session)}
}

func (_c *MockSessionStore_CreateSession_Call) Run(run func(session *models.Session)) *MockSessionStore_CreateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *models.Session
		if args[0] != nil {
			arg0 = args[0].(*models.Session)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSessionStore_CreateSession_Call) Return(session1 *models.Session, err error) *MockSessionStore_CreateSession_Call {
	_c.Call.Return(session1, err)
	return _c
}

func (_c *MockSessionStore_CreateSession_Call) RunAndReturn(run func(session *models.Session) (*models.Session, error)) *MockSessionStore_CreateSession_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserFromSession provides a mock function for the type MockSessionStore
func (_mock *MockSessionStore) GetUserFromSession(sessionID string, userID string) (*models.User, error) {
	ret := _mock.Called(sessionID, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserFromSession")
	}

	var r0 *models.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (*models.User, error)); ok {
		return returnFunc(sessionID, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) *models.User); ok {
		r0 = returnFunc(sessionID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(sessionID, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionStore_GetUserFromSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserFromSession'
type MockSessionStore_GetUserFromSession_Call struct {
	*mock.Call
}

// GetUserFromSession is a helper method to define mock.On call
//   - sessionID string
//   - userID string
func (_e *MockSessionStore_Expecter) GetUserFromSession(sessionID interface{}, userID interface{}) *MockSessionStore_GetUserFromSession_Call {
	return &MockSessionStore_GetUserFromSession_Call{Call: _e.mock.On("GetUserFromSession", sessionID, userID)}
}

func (_c *MockSessionStore_GetUserFromSession_Call) Run(run func(sessionID string, userID string)) *MockSessionStore_GetUserFromSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionStore_GetUserFromSession_Call) Return(user *models.User, err error) *MockSessionStore_GetUserFromSession_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockSessionStore_GetUserFromSession_Call) RunAndReturn(run func(sessionID string, userID string) (*models.User, error)) *MockSessionStore_GetUserFromSession_Call {
	_c.Call.Return(run)
	return _c
}
