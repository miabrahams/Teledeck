// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package store

import (
	"teledeck/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// NewMockMediaStore creates a new instance of MockMediaStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMediaStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMediaStore {
	mock := &MockMediaStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMediaStore is an autogenerated mock type for the MediaStore type
type MockMediaStore struct {
	mock.Mock
}

type MockMediaStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMediaStore) EXPECT() *MockMediaStore_Expecter {
	return &MockMediaStore_Expecter{mock: &_m.Mock}
}

// GetAllMediaItems provides a mock function for the type MockMediaStore
func (_mock *MockMediaStore) GetAllMediaItems() ([]models.MediaItemWithMetadata, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllMediaItems")
	}

	var r0 []models.MediaItemWithMetadata
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]models.MediaItemWithMetadata, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []models.MediaItemWithMetadata); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.MediaItemWithMetadata)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMediaStore_GetAllMediaItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllMediaItems'
type MockMediaStore_GetAllMediaItems_Call struct {
	*mock.Call
}

// GetAllMediaItems is a helper method to define mock.On call
func (_e *MockMediaStore_Expecter) GetAllMediaItems() *MockMediaStore_GetAllMediaItems_Call {
	return &MockMediaStore_GetAllMediaItems_Call{Call: _e.mock.On("GetAllMediaItems")}
}

func (_c *MockMediaStore_GetAllMediaItems_Call) Run(run func()) *MockMediaStore_GetAllMediaItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMediaStore_GetAllMediaItems_Call) Return(mediaItemWithMetadatas []models.MediaItemWithMetadata, err error) *MockMediaStore_GetAllMediaItems_Call {
	_c.Call.Return(mediaItemWithMetadatas, err)
	return _c
}

func (_c *MockMediaStore_GetAllMediaItems_Call) RunAndReturn(run func() ([]models.MediaItemWithMetadata, error)) *MockMediaStore_GetAllMediaItems_Call {
	_c.Call.Return(run)
	return _c
}

// GetMediaItem provides a mock function for the type MockMediaStore
func (_mock *MockMediaStore) GetMediaItem(id string) (*models.MediaItemWithMetadata, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetMediaItem")
	}

	var r0 *models.MediaItemWithMetadata
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*models.MediaItemWithMetadata, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *models.MediaItemWithMetadata); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.MediaItemWithMetadata)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMediaStore_GetMediaItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMediaItem'
type MockMediaStore_GetMediaItem_Call struct {
	*mock.Call
}

// GetMediaItem is a helper method to define mock.On call
//   - id string
func (_e *MockMediaStore_Expecter) GetMediaItem(id interface{}) *MockMediaStore_GetMediaItem_Call {
	return &MockMediaStore_GetMediaItem_Call{Call: _e.mock.On("GetMediaItem", id)}
}

func (_c *MockMediaStore_GetMediaItem_Call) Run(run func(id string)) *MockMediaStore_GetMediaItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMediaStore_GetMediaItem_Call) Return(mediaItemWithMetadata *models.MediaItemWithMetadata, err error) *MockMediaStore_GetMediaItem_Call {
	_c.Call.Return(mediaItemWithMetadata, err)
	return _c
}

func (_c *MockMediaStore_GetMediaItem_Call) RunAndReturn(run func(id string) (*models.MediaItemWithMetadata, error)) *MockMediaStore_GetMediaItem_Call {
	_c.Call.Return(run)
	return _c
}

// GetMediaItemCount provides a mock function for the type MockMediaStore
func (_mock *MockMediaStore) GetMediaItemCount(P models.SearchPrefs) int64 {
	ret := _mock.Called(P)

	if len(ret) == 0 {
		panic("no return value specified for GetMediaItemCount")
	}

	var r0 int64
	if returnFunc, ok := ret.Get(0).(func(models.SearchPrefs) int64); ok {
		r0 = returnFunc(P)
	} else {
		r0 = ret.Get(0).(int64)
	}
	return r0
}

// MockMediaStore_GetMediaItemCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMediaItemCount'
type MockMediaStore_GetMediaItemCount_Call struct {
	*mock.Call
}

// GetMediaItemCount is a helper method to define mock.On call
//   - P models.SearchPrefs
func (_e *MockMediaStore_Expecter) GetMediaItemCount(P interface{}) *MockMediaStore_GetMediaItemCount_Call {
	return &MockMediaStore_GetMediaItemCount_Call{Call: _e.mock.On("GetMediaItemCount", P)}
}

func (_c *MockMediaStore_GetMediaItemCount_Call) Run(run func(P models.SearchPrefs)) *MockMediaStore_GetMediaItemCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 models.SearchPrefs
		if args[0] != nil {
			arg0 = args[0].(models.SearchPrefs)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMediaStore_GetMediaItemCount_Call) Return(n int64) *MockMediaStore_GetMediaItemCount_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockMediaStore_GetMediaItemCount_Call) RunAndReturn(run func(P models.SearchPrefs) int64) *MockMediaStore_GetMediaItemCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetPaginatedMediaItemIds provides a mock function for the type MockMediaStore
func (_mock *MockMediaStore) GetPaginatedMediaItemIds(page int, itemsPerPage int, P models.SearchPrefs) ([]models.MediaItemID, error) {
	ret := _mock.Called(page, itemsPerPage, P)

	if len(ret) == 0 {
		panic("no return value specified for GetPaginatedMediaItemIds")
	}

	var r0 []models.MediaItemID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int, int, models.SearchPrefs) ([]models.MediaItemID, error)); ok {
		return returnFunc(page, itemsPerPage, P)
	}
	if returnFunc, ok := ret.Get(0).(func(int, int, models.SearchPrefs) []models.MediaItemID); ok {
		r0 = returnFunc(page, itemsPerPage, P)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.MediaItemID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int, int, models.SearchPrefs) error); ok {
		r1 = returnFunc(page, itemsPerPage, P)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMediaStore_GetPaginatedMediaItemIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPaginatedMediaItemIds'
type MockMediaStore_GetPaginatedMediaItemIds_Call struct {
	*mock.Call
}

// GetPaginatedMediaItemIds is a helper method to define mock.On call
//   - page int
//   - itemsPerPage int
//   - P models.SearchPrefs
func (_e *MockMediaStore_Expecter) GetPaginatedMediaItemIds(page interface{}, itemsPerPage interface{}, P interface{}) *MockMediaStore_GetPaginatedMediaItemIds_Call {
	return &MockMediaStore_GetPaginatedMediaItemIds_Call{Call: _e.mock.On("GetPaginatedMediaItemIds", page, itemsPerPage, P)}
}

func (_c *MockMediaStore_GetPaginatedMediaItemIds_Call) Run(run func(page int, itemsPerPage int, P models.SearchPrefs)) *MockMediaStore_GetPaginatedMediaItemIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 models.SearchPrefs
		if args[2] != nil {
			arg2 = args[2].(models.SearchPrefs)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockMediaStore_GetPaginatedMediaItemIds_Call) Return(mediaItemIDs []models.MediaItemID, err error) *MockMediaStore_GetPaginatedMediaItemIds_Call {
	_c.Call.Return(mediaItemIDs, err)
	return _c
}

func (_c *MockMediaStore_GetPaginatedMediaItemIds_Call) RunAndReturn(run func(page int, itemsPerPage int, P models.SearchPrefs) ([]models.MediaItemID, error)) *MockMediaStore_GetPaginatedMediaItemIds_Call {
	_c.Call.Return(run)
	return _c
}

// GetPaginatedMediaItems provides a mock function for the type MockMediaStore
func (_mock *MockMediaStore) GetPaginatedMediaItems(page int, itemsPerPage int, P models.SearchPrefs) ([]models.MediaItemWithMetadata, error) {
	ret := _mock.Called(page, itemsPerPage, P)

	if len(ret) == 0 {
		panic("no return value specified for GetPaginatedMediaItems")
	}

	var r0 []models.MediaItemWithMetadata
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int, int, models.SearchPrefs) ([]models.MediaItemWithMetadata, error)); ok {
		return returnFunc(page, itemsPerPage, P)
	}
	if returnFunc, ok := ret.Get(0).(func(int, int, models.SearchPrefs) []models.MediaItemWithMetadata); ok {
		r0 = returnFunc(page, itemsPerPage, P)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.MediaItemWithMetadata)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int, int, models.SearchPrefs) error); ok {
		r1 = returnFunc(page, itemsPerPage, P)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMediaStore_GetPaginatedMediaItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPaginatedMediaItems'
type MockMediaStore_GetPaginatedMediaItems_Call struct {
	*mock.Call
}

// GetPaginatedMediaItems is a helper method to define mock.On call
//   - page int
//   - itemsPerPage int
//   - P models.SearchPrefs
func (_e *MockMediaStore_Expecter) GetPaginatedMediaItems(page interface{}, itemsPerPage interface{}, P interface{}) *MockMediaStore_GetPaginatedMediaItems_Call {
	return &MockMediaStore_GetPaginatedMediaItems_Call{Call: _e.mock.On("GetPaginatedMediaItems", page, itemsPerPage, P)}
}

func (_c *MockMediaStore_GetPaginatedMediaItems_Call) Run(run func(page int, itemsPerPage int, P models.SearchPrefs)) *MockMediaStore_GetPaginatedMediaItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 models.SearchPrefs
		if args[2] != nil {
			arg2 = args[2].(models.SearchPrefs)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockMediaStore_GetPaginatedMediaItems_Call) Return(mediaItemWithMetadatas []models.MediaItemWithMetadata, err error) *MockMediaStore_GetPaginatedMediaItems_Call {
	_c.Call.Return(mediaItemWithMetadatas, err)
	return _c
}

func (_c *MockMediaStore_GetPaginatedMediaItems_Call) RunAndReturn(run func(page int, itemsPerPage int, P models.SearchPrefs) ([]models.MediaItemWithMetadata, error)) *MockMediaStore_GetPaginatedMediaItems_Call {
	_c.Call.Return(run)
	return _c
}

// GetThumbnail provides a mock function for the type MockMediaStore
func (_mock *MockMediaStore) GetThumbnail(mediaItemID string) (string, error) {
	ret := _mock.Called(mediaItemID)

	if len(ret) == 0 {
		panic("no return value specified for GetThumbnail")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(mediaItemID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(mediaItemID)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(mediaItemID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMediaStore_GetThumbnail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetThumbnail'
type MockMediaStore_GetThumbnail_Call struct {
	*mock.Call
}

// GetThumbnail is a helper method to define mock.On call
//   - mediaItemID string
func (_e *MockMediaStore_Expecter) GetThumbnail(mediaItemID interface{}) *MockMediaStore_GetThumbnail_Call {
	return &MockMediaStore_GetThumbnail_Call{Call: _e.mock.On("GetThumbnail", mediaItemID)}
}

func (_c *MockMediaStore_GetThumbnail_Call) Run(run func(mediaItemID string)) *MockMediaStore_GetThumbnail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMediaStore_GetThumbnail_Call) Return(s string, err error) *MockMediaStore_GetThumbnail_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockMediaStore_GetThumbnail_Call) RunAndReturn(run func(mediaItemID string) (string, error)) *MockMediaStore_GetThumbnail_Call {
	_c.Call.Return(run)
	return _c
}

// GetTotalMediaItems provides a mock function for the type MockMediaStore
func (_mock *MockMediaStore) GetTotalMediaItems() int64 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTotalMediaItems")
	}

	var r0 int64
	if returnFunc, ok := ret.Get(0).(func() int64); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int64)
	}
	return r0
}

// MockMediaStore_GetTotalMediaItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTotalMediaItems'
type MockMediaStore_GetTotalMediaItems_Call struct {
	*mock.Call
}

// GetTotalMediaItems is a helper method to define mock.On call
func (_e *MockMediaStore_Expecter) GetTotalMediaItems() *MockMediaStore_GetTotalMediaItems_Call {
	return &MockMediaStore_GetTotalMediaItems_Call{Call: _e.mock.On("GetTotalMediaItems")}
}

func (_c *MockMediaStore_GetTotalMediaItems_Call) Run(run func()) *MockMediaStore_GetTotalMediaItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMediaStore_GetTotalMediaItems_Call) Return(n int64) *MockMediaStore_GetTotalMediaItems_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockMediaStore_GetTotalMediaItems_Call) RunAndReturn(run func() int64) *MockMediaStore_GetTotalMediaItems_Call {
	_c.Call.Return(run)
	return _c
}

// MarkDeleted provides a mock function for the type MockMediaStore
func (_mock *MockMediaStore) MarkDeleted(item *models.MediaItem) error {
	ret := _mock.Called(item)

	if len(ret) == 0 {
		panic("no return value specified for MarkDeleted")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*models.MediaItem) error); ok {
		r0 = returnFunc(item)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMediaStore_MarkDeleted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkDeleted'
type MockMediaStore_MarkDeleted_Call struct {
	*mock.Call
}

// MarkDeleted is a helper method to define mock.On call
//   - item *models.MediaItem
func (_e *MockMediaStore_Expecter) MarkDeleted(item interface{}) *MockMediaStore_MarkDeleted_Call {
	return &MockMediaStore_MarkDeleted_Call{Call: _e.mock.On("MarkDeleted", item)}
}

func (_c *MockMediaStore_MarkDeleted_Call) Run(run func(item *models.MediaItem)) *MockMediaStore_MarkDeleted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *models.MediaItem
		if args[0] != nil {
			arg0 = args[0].(*models.MediaItem)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMediaStore_MarkDeleted_Call) Return(err error) *MockMediaStore_MarkDeleted_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMediaStore_MarkDeleted_Call) RunAndReturn(run func(item *models.MediaItem) error) *MockMediaStore_MarkDeleted_Call {
	_c.Call.Return(run)
	return _c
}

// MarkDeletedAndGetNext provides a mock function for the type MockMediaStore
func (_mock *MockMediaStore) MarkDeletedAndGetNext(item *models.MediaItem, page int, itemsPerPage int, P models.SearchPrefs) (*models.MediaItemWithMetadata, error) {
	ret := _mock.Called(item, page, itemsPerPage, P)

	if len(ret) == 0 {
		panic("no return value specified for MarkDeletedAndGetNext")
	}

	var r0 *models.MediaItemWithMetadata
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*models.MediaItem, int, int, models.SearchPrefs) (*models.MediaItemWithMetadata, error)); ok {
		return returnFunc(item, page, itemsPerPage, P)
	}
	if returnFunc, ok := ret.Get(0).(func(*models.MediaItem, int, int, models.SearchPrefs) *models.MediaItemWithMetadata); ok {
		r0 = returnFunc(item, page, itemsPerPage, P)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.MediaItemWithMetadata)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*models.MediaItem, int, int, models.SearchPrefs) error); ok {
		r1 = returnFunc(item, page, itemsPerPage, P)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMediaStore_MarkDeletedAndGetNext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkDeletedAndGetNext'
type MockMediaStore_MarkDeletedAndGetNext_Call struct {
	*mock.Call
}

// MarkDeletedAndGetNext is a helper method to define mock.On call
//   - item *models.MediaItem
//   - page int
//   - itemsPerPage int
//   - P models.SearchPrefs
func (_e *MockMediaStore_Expecter) MarkDeletedAndGetNext(item interface{}, page interface{}, itemsPerPage interface{}, P interface{}) *MockMediaStore_MarkDeletedAndGetNext_Call {
	return &MockMediaStore_MarkDeletedAndGetNext_Call{Call: _e.mock.On("MarkDeletedAndGetNext", item, page, itemsPerPage, P)}
}

func (_c *MockMediaStore_MarkDeletedAndGetNext_Call) Run(run func(item *models.MediaItem, page int, itemsPerPage int, P models.SearchPrefs)) *MockMediaStore_MarkDeletedAndGetNext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *models.MediaItem
		if args[0] != nil {
			arg0 = args[0].(*models.MediaItem)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		var arg3 models.SearchPrefs
		if args[3] != nil {
			arg3 = args[3].(models.SearchPrefs)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockMediaStore_MarkDeletedAndGetNext_Call) Return(mediaItemWithMetadata *models.MediaItemWithMetadata, err error) *MockMediaStore_MarkDeletedAndGetNext_Call {
	_c.Call.Return(mediaItemWithMetadata, err)
	return _c
}

func (_c *MockMediaStore_MarkDeletedAndGetNext_Call) RunAndReturn(run func(item *models.MediaItem, page int, itemsPerPage int, P models.SearchPrefs) (*models.MediaItemWithMetadata, error)) *MockMediaStore_MarkDeletedAndGetNext_Call {
	_c.Call.Return(run)
	return _c
}

// SetThumbnail provides a mock function for the type MockMediaStore
func (_mock *MockMediaStore) SetThumbnail(mediaItemID string, fileName string) error {
	ret := _mock.Called(mediaItemID, fileName)

	if len(ret) == 0 {
		panic("no return value specified for SetThumbnail")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(mediaItemID, fileName)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMediaStore_SetThumbnail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetThumbnail'
type MockMediaStore_SetThumbnail_Call struct {
	*mock.Call
}

// SetThumbnail is a helper method to define mock.On call
//   - mediaItemID string
//   - fileName string
func (_e *MockMediaStore_Expecter) SetThumbnail(mediaItemID interface{}, fileName interface{}) *MockMediaStore_SetThumbnail_Call {
	return &MockMediaStore_SetThumbnail_Call{Call: _e.mock.On("SetThumbnail", mediaItemID, fileName)}
}

func (_c *MockMediaStore_SetThumbnail_Call) Run(run func(mediaItemID string, fileName string)) *MockMediaStore_SetThumbnail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMediaStore_SetThumbnail_Call) Return(err error) *MockMediaStore_SetThumbnail_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMediaStore_SetThumbnail_Call) RunAndReturn(run func(mediaItemID string, fileName string) error) *MockMediaStore_SetThumbnail_Call {
	_c.Call.Return(run)
	return _c
}

// ToggleFavorite provides a mock function for the type MockMediaStore
func (_mock *MockMediaStore) ToggleFavorite(id string) (*models.MediaItemWithMetadata, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for ToggleFavorite")
	}

	var r0 *models.MediaItemWithMetadata
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*models.MediaItemWithMetadata, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *models.MediaItemWithMetadata); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.MediaItemWithMetadata)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMediaStore_ToggleFavorite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToggleFavorite'
type MockMediaStore_ToggleFavorite_Call struct {
	*mock.Call
}

// ToggleFavorite is a helper method to define mock.On call
//   - id string
func (_e *MockMediaStore_Expecter) ToggleFavorite(id interface{}) *MockMediaStore_ToggleFavorite_Call {
	return &MockMediaStore_ToggleFavorite_Call{Call: _e.mock.On("ToggleFavorite", id)}
}

func (_c *MockMediaStore_ToggleFavorite_Call) Run(run func(id string)) *MockMediaStore_ToggleFavorite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMediaStore_ToggleFavorite_Call) Return(mediaItemWithMetadata *models.MediaItemWithMetadata, err error) *MockMediaStore_ToggleFavorite_Call {
	_c.Call.Return(mediaItemWithMetadata, err)
	return _c
}

func (_c *MockMediaStore_ToggleFavorite_Call) RunAndReturn(run func(id string) (*models.MediaItemWithMetadata, error)) *MockMediaStore_ToggleFavorite_Call {
	_c.Call.Return(run)
	return _c
}

// UndoLastDeleted provides a mock function for the type MockMediaStore
func (_mock *MockMediaStore) UndoLastDeleted() (*models.MediaItemWithMetadata, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for UndoLastDeleted")
	}

	var r0 *models.MediaItemWithMetadata
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*models.MediaItemWithMetadata, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *models.MediaItemWithMetadata); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.MediaItemWithMetadata)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMediaStore_UndoLastDeleted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UndoLastDeleted'
type MockMediaStore_UndoLastDeleted_Call struct {
	*mock.Call
}

// UndoLastDeleted is a helper method to define mock.On call
func (_e *MockMediaStore_Expecter) UndoLastDeleted() *MockMediaStore_UndoLastDeleted_Call {
	return &MockMediaStore_UndoLastDeleted_Call{Call: _e.mock.On("UndoLastDeleted")}
}

func (_c *MockMediaStore_UndoLastDeleted_Call) Run(run func()) *MockMediaStore_UndoLastDeleted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMediaStore_UndoLastDeleted_Call) Return(mediaItemWithMetadata *models.MediaItemWithMetadata, err error) *MockMediaStore_UndoLastDeleted_Call {
	_c.Call.Return(mediaItemWithMetadata, err)
	return _c
}

func (_c *MockMediaStore_UndoLastDeleted_Call) RunAndReturn(run func() (*models.MediaItemWithMetadata, error)) *MockMediaStore_UndoLastDeleted_Call {
	_c.Call.Return(run)
	return _c
}
