// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package store

import (
	"teledeck/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// NewMockTagsStore creates a new instance of MockTagsStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTagsStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTagsStore {
	mock := &MockTagsStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTagsStore is an autogenerated mock type for the TagsStore type
type MockTagsStore struct {
	mock.Mock
}

type MockTagsStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTagsStore) EXPECT() *MockTagsStore_Expecter {
	return &MockTagsStore_Expecter{mock: &_m.Mock}
}

// GetAllTags provides a mock function for the type MockTagsStore
func (_mock *MockTagsStore) GetAllTags() ([]models.Tag, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllTags")
	}

	var r0 []models.Tag
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]models.Tag, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []models.Tag); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Tag)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTagsStore_GetAllTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTags'
type MockTagsStore_GetAllTags_Call struct {
	*mock.Call
}

// GetAllTags is a helper method to define mock.On call
func (_e *MockTagsStore_Expecter) GetAllTags() *MockTagsStore_GetAllTags_Call {
	return &MockTagsStore_GetAllTags_Call{Call: _e.mock.On("GetAllTags")}
}

func (_c *MockTagsStore_GetAllTags_Call) Run(run func()) *MockTagsStore_GetAllTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTagsStore_GetAllTags_Call) Return(tags []models.Tag, err error) *MockTagsStore_GetAllTags_Call {
	_c.Call.Return(tags, err)
	return _c
}

func (_c *MockTagsStore_GetAllTags_Call) RunAndReturn(run func() ([]models.Tag, error)) *MockTagsStore_GetAllTags_Call {
	_c.Call.Return(run)
	return _c
}

// GetItemTags provides a mock function for the type MockTagsStore
func (_mock *MockTagsStore) GetItemTags(itemid string) ([]models.TagWeight, error) {
	ret := _mock.Called(itemid)

	if len(ret) == 0 {
		panic("no return value specified for GetItemTags")
	}

	var r0 []models.TagWeight
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]models.TagWeight, error)); ok {
		return returnFunc(itemid)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []models.TagWeight); ok {
		r0 = returnFunc(itemid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.TagWeight)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(itemid)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTagsStore_GetItemTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetItemTags'
type MockTagsStore_GetItemTags_Call struct {
	*mock.Call
}

// GetItemTags is a helper method to define mock.On call
//   - itemid string
func (_e *MockTagsStore_Expecter) GetItemTags(itemid interface{}) *MockTagsStore_GetItemTags_Call {
	return &MockTagsStore_GetItemTags_Call{Call: _e.mock.On("GetItemTags", itemid)}
}

func (_c *MockTagsStore_GetItemTags_Call) Run(run func(itemid string)) *MockTagsStore_GetItemTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTagsStore_GetItemTags_Call) Return(tagWeights []models.TagWeight, err error) *MockTagsStore_GetItemTags_Call {
	_c.Call.Return(tagWeights, err)
	return _c
}

func (_c *MockTagsStore_GetItemTags_Call) RunAndReturn(run func(itemid string) ([]models.TagWeight, error)) *MockTagsStore_GetItemTags_Call {
	_c.Call.Return(run)
	return _c
}

// GetTagID provides a mock function for the type MockTagsStore
func (_mock *MockTagsStore) GetTagID(name string) (models.Tag, error) {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetTagID")
	}

	var r0 models.Tag
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (models.Tag, error)); ok {
		return returnFunc(name)
	}
	if returnFunc, ok := ret.Get(0).(func(string) models.Tag); ok {
		r0 = returnFunc(name)
	} else {
		r0 = ret.Get(0).(models.Tag)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTagsStore_GetTagID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTagID'
type MockTagsStore_GetTagID_Call struct {
	*mock.Call
}

// GetTagID is a helper method to define mock.On call
//   - name string
func (_e *MockTagsStore_Expecter) GetTagID(name interface{}) *MockTagsStore_GetTagID_Call {
	return &MockTagsStore_GetTagID_Call{Call: _e.mock.On("GetTagID", name)}
}

func (_c *MockTagsStore_GetTagID_Call) Run(run func(name string)) *MockTagsStore_GetTagID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTagsStore_GetTagID_Call) Return(tag models.Tag, err error) *MockTagsStore_GetTagID_Call {
	_c.Call.Return(tag, err)
	return _c
}

func (_c *MockTagsStore_GetTagID_Call) RunAndReturn(run func(name string) (models.Tag, error)) *MockTagsStore_GetTagID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTagIDs provides a mock function for the type MockTagsStore
func (_mock *MockTagsStore) GetTagIDs(names []string) ([]models.Tag, error) {
	ret := _mock.Called(names)

	if len(ret) == 0 {
		panic("no return value specified for GetTagIDs")
	}

	var r0 []models.Tag
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]string) ([]models.Tag, error)); ok {
		return returnFunc(names)
	}
	if returnFunc, ok := ret.Get(0).(func([]string) []models.Tag); ok {
		r0 = returnFunc(names)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Tag)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]string) error); ok {
		r1 = returnFunc(names)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTagsStore_GetTagIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTagIDs'
type MockTagsStore_GetTagIDs_Call struct {
	*mock.Call
}

// GetTagIDs is a helper method to define mock.On call
//   - names []string
func (_e *MockTagsStore_Expecter) GetTagIDs(names interface{}) *MockTagsStore_GetTagIDs_Call {
	return &MockTagsStore_GetTagIDs_Call{Call: _e.mock.On("GetTagIDs", names)}
}

func (_c *MockTagsStore_GetTagIDs_Call) Run(run func(names []string)) *MockTagsStore_GetTagIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []string
		if args[0] != nil {
			arg0 = args[0].([]string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTagsStore_GetTagIDs_Call) Return(tags []models.Tag, err error) *MockTagsStore_GetTagIDs_Call {
	_c.Call.Return(tags, err)
	return _c
}

func (_c *MockTagsStore_GetTagIDs_Call) RunAndReturn(run func(names []string) ([]models.Tag, error)) *MockTagsStore_GetTagIDs_Call {
	_c.Call.Return(run)
	return _c
}

// SetItemTags provides a mock function for the type MockTagsStore
func (_mock *MockTagsStore) SetItemTags(weights []models.TagWeight, itemid string) error {
	ret := _mock.Called(weights, itemid)

	if len(ret) == 0 {
		panic("no return value specified for SetItemTags")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]models.TagWeight, string) error); ok {
		r0 = returnFunc(weights, itemid)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTagsStore_SetItemTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetItemTags'
type MockTagsStore_SetItemTags_Call struct {
	*mock.Call
}

// SetItemTags is a helper method to define mock.On call
//   - weights []models.TagWeight
//   - itemid string
func (_e *MockTagsStore_Expecter) SetItemTags(weights interface{}, itemid interface{}) *MockTagsStore_SetItemTags_Call {
	return &MockTagsStore_SetItemTags_Call{Call: _e.mock.On("SetItemTags", weights, itemid)}
}

func (_c *MockTagsStore_SetItemTags_Call) Run(run func(weights []models.TagWeight, itemid string)) *MockTagsStore_SetItemTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []models.TagWeight
		if args[0] != nil {
			arg0 = args[0].([]models.TagWeight)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTagsStore_SetItemTags_Call) Return(err error) *MockTagsStore_SetItemTags_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTagsStore_SetItemTags_Call) RunAndReturn(run func(weights []models.TagWeight, itemid string) error) *MockTagsStore_SetItemTags_Call {
	_c.Call.Return(run)
	return _c
}
