// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package files

import (
	"io"

	mock "github.com/stretchr/testify/mock"
)

// NewMockLocalFileOperator creates a new instance of MockLocalFileOperator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLocalFileOperator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLocalFileOperator {
	mock := &MockLocalFileOperator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLocalFileOperator is an autogenerated mock type for the LocalFileOperator type
type MockLocalFileOperator struct {
	mock.Mock
}

type MockLocalFileOperator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLocalFileOperator) EXPECT() *MockLocalFileOperator_Expecter {
	return &MockLocalFileOperator_Expecter{mock: &_m.Mock}
}

// Copy provides a mock function for the type MockLocalFileOperator
func (_mock *MockLocalFileOperator) Copy(src string, dst string) error {
	ret := _mock.Called(src, dst)

	if len(ret) == 0 {
		panic("no return value specified for Copy")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(src, dst)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLocalFileOperator_Copy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Copy'
type MockLocalFileOperator_Copy_Call struct {
	*mock.Call
}

// Copy is a helper method to define mock.On call
//   - src string
//   - dst string
func (_e *MockLocalFileOperator_Expecter) Copy(src interface{}, dst interface{}) *MockLocalFileOperator_Copy_Call {
	return &MockLocalFileOperator_Copy_Call{Call: _e.mock.On("Copy", src, dst)}
}

func (_c *MockLocalFileOperator_Copy_Call) Run(run func(src string, dst string)) *MockLocalFileOperator_Copy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLocalFileOperator_Copy_Call) Return(err error) *MockLocalFileOperator_Copy_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLocalFileOperator_Copy_Call) RunAndReturn(run func(src string, dst string) error) *MockLocalFileOperator_Copy_Call {
	_c.Call.Return(run)
	return _c
}

// Move provides a mock function for the type MockLocalFileOperator
func (_mock *MockLocalFileOperator) Move(src string, dst string) error {
	ret := _mock.Called(src, dst)

	if len(ret) == 0 {
		panic("no return value specified for Move")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(src, dst)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLocalFileOperator_Move_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Move'
type MockLocalFileOperator_Move_Call struct {
	*mock.Call
}

// Move is a helper method to define mock.On call
//   - src string
//   - dst string
func (_e *MockLocalFileOperator_Expecter) Move(src interface{}, dst interface{}) *MockLocalFileOperator_Move_Call {
	return &MockLocalFileOperator_Move_Call{Call: _e.mock.On("Move", src, dst)}
}

func (_c *MockLocalFileOperator_Move_Call) Run(run func(src string, dst string)) *MockLocalFileOperator_Move_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLocalFileOperator_Move_Call) Return(err error) *MockLocalFileOperator_Move_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLocalFileOperator_Move_Call) RunAndReturn(run func(src string, dst string) error) *MockLocalFileOperator_Move_Call {
	_c.Call.Return(run)
	return _c
}

// Recycle provides a mock function for the type MockLocalFileOperator
func (_mock *MockLocalFileOperator) Recycle(path string) error {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Recycle")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(path)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLocalFileOperator_Recycle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Recycle'
type MockLocalFileOperator_Recycle_Call struct {
	*mock.Call
}

// Recycle is a helper method to define mock.On call
//   - path string
func (_e *MockLocalFileOperator_Expecter) Recycle(path interface{}) *MockLocalFileOperator_Recycle_Call {
	return &MockLocalFileOperator_Recycle_Call{Call: _e.mock.On("Recycle", path)}
}

func (_c *MockLocalFileOperator_Recycle_Call) Run(run func(path string)) *MockLocalFileOperator_Recycle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLocalFileOperator_Recycle_Call) Return(err error) *MockLocalFileOperator_Recycle_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLocalFileOperator_Recycle_Call) RunAndReturn(run func(path string) error) *MockLocalFileOperator_Recycle_Call {
	_c.Call.Return(run)
	return _c
}

// Rename provides a mock function for the type MockLocalFileOperator
func (_mock *MockLocalFileOperator) Rename(oldPath string, newPath string) error {
	ret := _mock.Called(oldPath, newPath)

	if len(ret) == 0 {
		panic("no return value specified for Rename")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(oldPath, newPath)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLocalFileOperator_Rename_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rename'
type MockLocalFileOperator_Rename_Call struct {
	*mock.Call
}

// Rename is a helper method to define mock.On call
//   - oldPath string
//   - newPath string
func (_e *MockLocalFileOperator_Expecter) Rename(oldPath interface{}, newPath interface{}) *MockLocalFileOperator_Rename_Call {
	return &MockLocalFileOperator_Rename_Call{Call: _e.mock.On("Rename", oldPath, newPath)}
}

func (_c *MockLocalFileOperator_Rename_Call) Run(run func(oldPath string, newPath string)) *MockLocalFileOperator_Rename_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLocalFileOperator_Rename_Call) Return(err error) *MockLocalFileOperator_Rename_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLocalFileOperator_Rename_Call) RunAndReturn(run func(oldPath string, newPath string) error) *MockLocalFileOperator_Rename_Call {
	_c.Call.Return(run)
	return _c
}

// Restore provides a mock function for the type MockLocalFileOperator
func (_mock *MockLocalFileOperator) Restore(path string) error {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Restore")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(path)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLocalFileOperator_Restore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Restore'
type MockLocalFileOperator_Restore_Call struct {
	*mock.Call
}

// Restore is a helper method to define mock.On call
//   - path string
func (_e *MockLocalFileOperator_Expecter) Restore(path interface{}) *MockLocalFileOperator_Restore_Call {
	return &MockLocalFileOperator_Restore_Call{Call: _e.mock.On("Restore", path)}
}

func (_c *MockLocalFileOperator_Restore_Call) Run(run func(path string)) *MockLocalFileOperator_Restore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLocalFileOperator_Restore_Call) Return(err error) *MockLocalFileOperator_Restore_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLocalFileOperator_Restore_Call) RunAndReturn(run func(path string) error) *MockLocalFileOperator_Restore_Call {
	_c.Call.Return(run)
	return _c
}

// Upload provides a mock function for the type MockLocalFileOperator
func (_mock *MockLocalFileOperator) Upload(dst string, content io.Reader) error {
	ret := _mock.Called(dst, content)

	if len(ret) == 0 {
		panic("no return value specified for Upload")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, io.Reader) error); ok {
		r0 = returnFunc(dst, content)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockLocalFileOperator_Upload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upload'
type MockLocalFileOperator_Upload_Call struct {
	*mock.Call
}

// Upload is a helper method to define mock.On call
//   - dst string
//   - content io.Reader
func (_e *MockLocalFileOperator_Expecter) Upload(dst interface{}, content interface{}) *MockLocalFileOperator_Upload_Call {
	return &MockLocalFileOperator_Upload_Call{Call: _e.mock.On("Upload", dst, content)}
}

func (_c *MockLocalFileOperator_Upload_Call) Run(run func(dst string, content io.Reader)) *MockLocalFileOperator_Upload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 io.Reader
		if args[1] != nil {
			arg1 = args[1].(io.Reader)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLocalFileOperator_Upload_Call) Return(err error) *MockLocalFileOperator_Upload_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockLocalFileOperator_Upload_Call) RunAndReturn(run func(dst string, content io.Reader) error) *MockLocalFileOperator_Upload_Call {
	_c.Call.Return(run)
	return _c
}
