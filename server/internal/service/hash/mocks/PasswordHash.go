// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package hash

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockPasswordHash creates a new instance of MockPasswordHash. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPasswordHash(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPasswordHash {
	mock := &MockPasswordHash{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPasswordHash is an autogenerated mock type for the PasswordHash type
type MockPasswordHash struct {
	mock.Mock
}

type MockPasswordHash_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPasswordHash) EXPECT() *MockPasswordHash_Expecter {
	return &MockPasswordHash_Expecter{mock: &_m.Mock}
}

// ComparePasswordAndHash provides a mock function for the type MockPasswordHash
func (_mock *MockPasswordHash) ComparePasswordAndHash(password string, encodedHash string) (bool, error) {
	ret := _mock.Called(password, encodedHash)

	if len(ret) == 0 {
		panic("no return value specified for ComparePasswordAndHash")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return returnFunc(password, encodedHash)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = returnFunc(password, encodedHash)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(password, encodedHash)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPasswordHash_ComparePasswordAndHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ComparePasswordAndHash'
type MockPasswordHash_ComparePasswordAndHash_Call struct {
	*mock.Call
}

// ComparePasswordAndHash is a helper method to define mock.On call
//   - password string
//   - encodedHash string
func (_e *MockPasswordHash_Expecter) ComparePasswordAndHash(password interface{}, encodedHash interface{}) *MockPasswordHash_ComparePasswordAndHash_Call {
	return &MockPasswordHash_ComparePasswordAndHash_Call{Call: _e.mock.On("ComparePasswordAndHash", password, encodedHash)}
}

func (_c *MockPasswordHash_ComparePasswordAndHash_Call) Run(run func(password string, encodedHash string)) *MockPasswordHash_ComparePasswordAndHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPasswordHash_ComparePasswordAndHash_Call) Return(match bool, err error) *MockPasswordHash_ComparePasswordAndHash_Call {
	_c.Call.Return(match, err)
	return _c
}

func (_c *MockPasswordHash_ComparePasswordAndHash_Call) RunAndReturn(run func(password string, encodedHash string) (bool, error)) *MockPasswordHash_ComparePasswordAndHash_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateFromPassword provides a mock function for the type MockPasswordHash
func (_mock *MockPasswordHash) GenerateFromPassword(password string) (string, error) {
	ret := _mock.Called(password)

	if len(ret) == 0 {
		panic("no return value specified for GenerateFromPassword")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(password)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(password)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPasswordHash_GenerateFromPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateFromPassword'
type MockPasswordHash_GenerateFromPassword_Call struct {
	*mock.Call
}

// GenerateFromPassword is a helper method to define mock.On call
//   - password string
func (_e *MockPasswordHash_Expecter) GenerateFromPassword(password interface{}) *MockPasswordHash_GenerateFromPassword_Call {
	return &MockPasswordHash_GenerateFromPassword_Call{Call: _e.mock.On("GenerateFromPassword", password)}
}

func (_c *MockPasswordHash_GenerateFromPassword_Call) Run(run func(password string)) *MockPasswordHash_GenerateFromPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPasswordHash_GenerateFromPassword_Call) Return(encodedHash string, err error) *MockPasswordHash_GenerateFromPassword_Call {
	_c.Call.Return(encodedHash, err)
	return _c
}

func (_c *MockPasswordHash_GenerateFromPassword_Call) RunAndReturn(run func(password string) (string, error)) *MockPasswordHash_GenerateFromPassword_Call {
	_c.Call.Return(run)
	return _c
}
