// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package thumbnailer

import (
	"teledeck/internal/service/thumbnailer"

	mock "github.com/stretchr/testify/mock"
)

// NewMockThumbnailer creates a new instance of MockThumbnailer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockThumbnailer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockThumbnailer {
	mock := &MockThumbnailer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockThumbnailer is an autogenerated mock type for the Thumbnailer type
type MockThumbnailer struct {
	mock.Mock
}

type MockThumbnailer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockThumbnailer) EXPECT() *MockThumbnailer_Expecter {
	return &MockThumbnailer_Expecter{mock: &_m.Mock}
}

// BaseDir provides a mock function for the type MockThumbnailer
func (_mock *MockThumbnailer) BaseDir() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for BaseDir")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockThumbnailer_BaseDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BaseDir'
type MockThumbnailer_BaseDir_Call struct {
	*mock.Call
}

// BaseDir is a helper method to define mock.On call
func (_e *MockThumbnailer_Expecter) BaseDir() *MockThumbnailer_BaseDir_Call {
	return &MockThumbnailer_BaseDir_Call{Call: _e.mock.On("BaseDir")}
}

func (_c *MockThumbnailer_BaseDir_Call) Run(run func()) *MockThumbnailer_BaseDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockThumbnailer_BaseDir_Call) Return(s string) *MockThumbnailer_BaseDir_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockThumbnailer_BaseDir_Call) RunAndReturn(run func() string) *MockThumbnailer_BaseDir_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateVideoThumbnail provides a mock function for the type MockThumbnailer
func (_mock *MockThumbnailer) GenerateVideoThumbnail(srcfile string, outfile string, correlationID any) error {
	ret := _mock.Called(srcfile, outfile, correlationID)

	if len(ret) == 0 {
		panic("no return value specified for GenerateVideoThumbnail")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, any) error); ok {
		r0 = returnFunc(srcfile, outfile, correlationID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockThumbnailer_GenerateVideoThumbnail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateVideoThumbnail'
type MockThumbnailer_GenerateVideoThumbnail_Call struct {
	*mock.Call
}

// GenerateVideoThumbnail is a helper method to define mock.On call
//   - srcfile string
//   - outfile string
//   - correlationID any
func (_e *MockThumbnailer_Expecter) GenerateVideoThumbnail(srcfile interface{}, outfile interface{}, correlationID interface{}) *MockThumbnailer_GenerateVideoThumbnail_Call {
	return &MockThumbnailer_GenerateVideoThumbnail_Call{Call: _e.mock.On("GenerateVideoThumbnail", srcfile, outfile, correlationID)}
}

func (_c *MockThumbnailer_GenerateVideoThumbnail_Call) Run(run func(srcfile string, outfile string, correlationID any)) *MockThumbnailer_GenerateVideoThumbnail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 any
		if args[2] != nil {
			arg2 = args[2].(any)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockThumbnailer_GenerateVideoThumbnail_Call) Return(err error) *MockThumbnailer_GenerateVideoThumbnail_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockThumbnailer_GenerateVideoThumbnail_Call) RunAndReturn(run func(srcfile string, outfile string, correlationID any) error) *MockThumbnailer_GenerateVideoThumbnail_Call {
	_c.Call.Return(run)
	return _c
}

// SetHandler provides a mock function for the type MockThumbnailer
func (_mock *MockThumbnailer) SetHandler(fn func(thumbnailer.Result)) {
	_mock.Called(fn)
	return
}

// MockThumbnailer_SetHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetHandler'
type MockThumbnailer_SetHandler_Call struct {
	*mock.Call
}

// SetHandler is a helper method to define mock.On call
//   - fn func(thumbnailer.Result)
func (_e *MockThumbnailer_Expecter) SetHandler(fn interface{}) *MockThumbnailer_SetHandler_Call {
	return &MockThumbnailer_SetHandler_Call{Call: _e.mock.On("SetHandler", fn)}
}

func (_c *MockThumbnailer_SetHandler_Call) Run(run func(fn func(thumbnailer.Result))) *MockThumbnailer_SetHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 func(thumbnailer.Result)
		if args[0] != nil {
			arg0 = args[0].(func(thumbnailer.Result))
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockThumbnailer_SetHandler_Call) Return() *MockThumbnailer_SetHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockThumbnailer_SetHandler_Call) RunAndReturn(run func(fn func(thumbnailer.Result))) *MockThumbnailer_SetHandler_Call {
	_c.Run(run)
	return _c
}
