// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package external

import (
	"image"

	mock "github.com/stretchr/testify/mock"
)

// NewMockAestheticsService creates a new instance of MockAestheticsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAestheticsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAestheticsService {
	mock := &MockAestheticsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAestheticsService is an autogenerated mock type for the AestheticsService type
type MockAestheticsService struct {
	mock.Mock
}

type MockAestheticsService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAestheticsService) EXPECT() *MockAestheticsService_Expecter {
	return &MockAestheticsService_Expecter{mock: &_m.Mock}
}

// ScoreImage provides a mock function for the type MockAestheticsService
func (_mock *MockAestheticsService) ScoreImage(imagePath string) (float32, error) {
	ret := _mock.Called(imagePath)

	if len(ret) == 0 {
		panic("no return value specified for ScoreImage")
	}

	var r0 float32
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (float32, error)); ok {
		return returnFunc(imagePath)
	}
	if returnFunc, ok := ret.Get(0).(func(string) float32); ok {
		r0 = returnFunc(imagePath)
	} else {
		r0 = ret.Get(0).(float32)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(imagePath)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAestheticsService_ScoreImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScoreImage'
type MockAestheticsService_ScoreImage_Call struct {
	*mock.Call
}

// ScoreImage is a helper method to define mock.On call
//   - imagePath string
func (_e *MockAestheticsService_Expecter) ScoreImage(imagePath interface{}) *MockAestheticsService_ScoreImage_Call {
	return &MockAestheticsService_ScoreImage_Call{Call: _e.mock.On("ScoreImage", imagePath)}
}

func (_c *MockAestheticsService_ScoreImage_Call) Run(run func(imagePath string)) *MockAestheticsService_ScoreImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAestheticsService_ScoreImage_Call) Return(f float32, err error) *MockAestheticsService_ScoreImage_Call {
	_c.Call.Return(f, err)
	return _c
}

func (_c *MockAestheticsService_ScoreImage_Call) RunAndReturn(run func(imagePath string) (float32, error)) *MockAestheticsService_ScoreImage_Call {
	_c.Call.Return(run)
	return _c
}

// ScoreImageData provides a mock function for the type MockAestheticsService
func (_mock *MockAestheticsService) ScoreImageData(image1 image.Image) (float32, error) {
	ret := _mock.Called(image1)

	if len(ret) == 0 {
		panic("no return value specified for ScoreImageData")
	}

	var r0 float32
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(image.Image) (float32, error)); ok {
		return returnFunc(image1)
	}
	if returnFunc, ok := ret.Get(0).(func(image.Image) float32); ok {
		r0 = returnFunc(image1)
	} else {
		r0 = ret.Get(0).(float32)
	}
	if returnFunc, ok := ret.Get(1).(func(image.Image) error); ok {
		r1 = returnFunc(image1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAestheticsService_ScoreImageData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScoreImageData'
type MockAestheticsService_ScoreImageData_Call struct {
	*mock.Call
}

// ScoreImageData is a helper method to define mock.On call
//   - image1 image.Image
func (_e *MockAestheticsService_Expecter) ScoreImageData(image1 interface{}) *MockAestheticsService_ScoreImageData_Call {
	return &MockAestheticsService_ScoreImageData_Call{Call: _e.mock.On("ScoreImageData", image1)}
}

func (_c *MockAestheticsService_ScoreImageData_Call) Run(run func(image1 image.Image)) *MockAestheticsService_ScoreImageData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 image.Image
		if args[0] != nil {
			arg0 = args[0].(image.Image)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAestheticsService_ScoreImageData_Call) Return(f float32, err error) *MockAestheticsService_ScoreImageData_Call {
	_c.Call.Return(f, err)
	return _c
}

func (_c *MockAestheticsService_ScoreImageData_Call) RunAndReturn(run func(image1 image.Image) (float32, error)) *MockAestheticsService_ScoreImageData_Call {
	_c.Call.Return(run)
	return _c
}
