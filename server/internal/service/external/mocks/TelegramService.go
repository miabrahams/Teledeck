// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package external

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockTelegramService creates a new instance of MockTelegramService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTelegramService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTelegramService {
	mock := &MockTelegramService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTelegramService is an autogenerated mock type for the TelegramService type
type MockTelegramService struct {
	mock.Mock
}

type MockTelegramService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTelegramService) EXPECT() *MockTelegramService_Expecter {
	return &MockTelegramService_Expecter{mock: &_m.Mock}
}

// GetMe provides a mock function for the type MockTelegramService
func (_mock *MockTelegramService) GetMe() {
	_mock.Called()
	return
}

// MockTelegramService_GetMe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMe'
type MockTelegramService_GetMe_Call struct {
	*mock.Call
}

// GetMe is a helper method to define mock.On call
func (_e *MockTelegramService_Expecter) GetMe() *MockTelegramService_GetMe_Call {
	return &MockTelegramService_GetMe_Call{Call: _e.mock.On("GetMe")}
}

func (_c *MockTelegramService_GetMe_Call) Run(run func()) *MockTelegramService_GetMe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTelegramService_GetMe_Call) Return() *MockTelegramService_GetMe_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTelegramService_GetMe_Call) RunAndReturn(run func()) *MockTelegramService_GetMe_Call {
	_c.Run(run)
	return _c
}

// GetVersion provides a mock function for the type MockTelegramService
func (_mock *MockTelegramService) GetVersion() {
	_mock.Called()
	return
}

// MockTelegramService_GetVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVersion'
type MockTelegramService_GetVersion_Call struct {
	*mock.Call
}

// GetVersion is a helper method to define mock.On call
func (_e *MockTelegramService_Expecter) GetVersion() *MockTelegramService_GetVersion_Call {
	return &MockTelegramService_GetVersion_Call{Call: _e.mock.On("GetVersion")}
}

func (_c *MockTelegramService_GetVersion_Call) Run(run func()) *MockTelegramService_GetVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTelegramService_GetVersion_Call) Return() *MockTelegramService_GetVersion_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTelegramService_GetVersion_Call) RunAndReturn(run func()) *MockTelegramService_GetVersion_Call {
	_c.Run(run)
	return _c
}

// listenForUpdates provides a mock function for the type MockTelegramService
func (_mock *MockTelegramService) listenForUpdates() {
	_mock.Called()
	return
}

// MockTelegramService_listenForUpdates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'listenForUpdates'
type MockTelegramService_listenForUpdates_Call struct {
	*mock.Call
}

// listenForUpdates is a helper method to define mock.On call
func (_e *MockTelegramService_Expecter) listenForUpdates() *MockTelegramService_listenForUpdates_Call {
	return &MockTelegramService_listenForUpdates_Call{Call: _e.mock.On("listenForUpdates")}
}

func (_c *MockTelegramService_listenForUpdates_Call) Run(run func()) *MockTelegramService_listenForUpdates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTelegramService_listenForUpdates_Call) Return() *MockTelegramService_listenForUpdates_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTelegramService_listenForUpdates_Call) RunAndReturn(run func()) *MockTelegramService_listenForUpdates_Call {
	_c.Run(run)
	return _c
}
