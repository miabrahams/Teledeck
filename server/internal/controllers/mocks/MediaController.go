// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package controllers

import (
	"teledeck/internal/controllers"
	"teledeck/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// NewMockMediaController creates a new instance of MockMediaController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMediaController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMediaController {
	mock := &MockMediaController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMediaController is an autogenerated mock type for the MediaController type
type MockMediaController struct {
	mock.Mock
}

type MockMediaController_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMediaController) EXPECT() *MockMediaController_Expecter {
	return &MockMediaController_Expecter{mock: &_m.Mock}
}

// DeletePageItems provides a mock function for the type MockMediaController
func (_mock *MockMediaController) DeletePageItems(itemIDs []string, page int, searchPrefs models.SearchPrefs) (*controllers.DeletePageResult, error) {
	ret := _mock.Called(itemIDs, page, searchPrefs)

	if len(ret) == 0 {
		panic("no return value specified for DeletePageItems")
	}

	var r0 *controllers.DeletePageResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]string, int, models.SearchPrefs) (*controllers.DeletePageResult, error)); ok {
		return returnFunc(itemIDs, page, searchPrefs)
	}
	if returnFunc, ok := ret.Get(0).(func([]string, int, models.SearchPrefs) *controllers.DeletePageResult); ok {
		r0 = returnFunc(itemIDs, page, searchPrefs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*controllers.DeletePageResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]string, int, models.SearchPrefs) error); ok {
		r1 = returnFunc(itemIDs, page, searchPrefs)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMediaController_DeletePageItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePageItems'
type MockMediaController_DeletePageItems_Call struct {
	*mock.Call
}

// DeletePageItems is a helper method to define mock.On call
//   - itemIDs []string
//   - page int
//   - searchPrefs models.SearchPrefs
func (_e *MockMediaController_Expecter) DeletePageItems(itemIDs interface{}, page interface{}, searchPrefs interface{}) *MockMediaController_DeletePageItems_Call {
	return &MockMediaController_DeletePageItems_Call{Call: _e.mock.On("DeletePageItems", itemIDs, page, searchPrefs)}
}

func (_c *MockMediaController_DeletePageItems_Call) Run(run func(itemIDs []string, page int, searchPrefs models.SearchPrefs)) *MockMediaController_DeletePageItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []string
		if args[0] != nil {
			arg0 = args[0].([]string)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 models.SearchPrefs
		if args[2] != nil {
			arg2 = args[2].(models.SearchPrefs)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockMediaController_DeletePageItems_Call) Return(deletePageResult *controllers.DeletePageResult, err error) *MockMediaController_DeletePageItems_Call {
	_c.Call.Return(deletePageResult, err)
	return _c
}

func (_c *MockMediaController_DeletePageItems_Call) RunAndReturn(run func(itemIDs []string, page int, searchPrefs models.SearchPrefs) (*controllers.DeletePageResult, error)) *MockMediaController_DeletePageItems_Call {
	_c.Call.Return(run)
	return _c
}

// GetAbsolutePath provides a mock function for the type MockMediaController
func (_mock *MockMediaController) GetAbsolutePath(mediaItem *models.MediaItem) string {
	ret := _mock.Called(mediaItem)

	if len(ret) == 0 {
		panic("no return value specified for GetAbsolutePath")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(*models.MediaItem) string); ok {
		r0 = returnFunc(mediaItem)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockMediaController_GetAbsolutePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAbsolutePath'
type MockMediaController_GetAbsolutePath_Call struct {
	*mock.Call
}

// GetAbsolutePath is a helper method to define mock.On call
//   - mediaItem *models.MediaItem
func (_e *MockMediaController_Expecter) GetAbsolutePath(mediaItem interface{}) *MockMediaController_GetAbsolutePath_Call {
	return &MockMediaController_GetAbsolutePath_Call{Call: _e.mock.On("GetAbsolutePath", mediaItem)}
}

func (_c *MockMediaController_GetAbsolutePath_Call) Run(run func(mediaItem *models.MediaItem)) *MockMediaController_GetAbsolutePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *models.MediaItem
		if args[0] != nil {
			arg0 = args[0].(*models.MediaItem)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMediaController_GetAbsolutePath_Call) Return(s string) *MockMediaController_GetAbsolutePath_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockMediaController_GetAbsolutePath_Call) RunAndReturn(run func(mediaItem *models.MediaItem) string) *MockMediaController_GetAbsolutePath_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllMediaItems provides a mock function for the type MockMediaController
func (_mock *MockMediaController) GetAllMediaItems() ([]models.MediaItemWithMetadata, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllMediaItems")
	}

	var r0 []models.MediaItemWithMetadata
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]models.MediaItemWithMetadata, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []models.MediaItemWithMetadata); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.MediaItemWithMetadata)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMediaController_GetAllMediaItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllMediaItems'
type MockMediaController_GetAllMediaItems_Call struct {
	*mock.Call
}

// GetAllMediaItems is a helper method to define mock.On call
func (_e *MockMediaController_Expecter) GetAllMediaItems() *MockMediaController_GetAllMediaItems_Call {
	return &MockMediaController_GetAllMediaItems_Call{Call: _e.mock.On("GetAllMediaItems")}
}

func (_c *MockMediaController_GetAllMediaItems_Call) Run(run func()) *MockMediaController_GetAllMediaItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMediaController_GetAllMediaItems_Call) Return(mediaItemWithMetadatas []models.MediaItemWithMetadata, err error) *MockMediaController_GetAllMediaItems_Call {
	_c.Call.Return(mediaItemWithMetadatas, err)
	return _c
}

func (_c *MockMediaController_GetAllMediaItems_Call) RunAndReturn(run func() ([]models.MediaItemWithMetadata, error)) *MockMediaController_GetAllMediaItems_Call {
	_c.Call.Return(run)
	return _c
}

// GetMediaItem provides a mock function for the type MockMediaController
func (_mock *MockMediaController) GetMediaItem(id string) (*models.MediaItemWithMetadata, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetMediaItem")
	}

	var r0 *models.MediaItemWithMetadata
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*models.MediaItemWithMetadata, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *models.MediaItemWithMetadata); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.MediaItemWithMetadata)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMediaController_GetMediaItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMediaItem'
type MockMediaController_GetMediaItem_Call struct {
	*mock.Call
}

// GetMediaItem is a helper method to define mock.On call
//   - id string
func (_e *MockMediaController_Expecter) GetMediaItem(id interface{}) *MockMediaController_GetMediaItem_Call {
	return &MockMediaController_GetMediaItem_Call{Call: _e.mock.On("GetMediaItem", id)}
}

func (_c *MockMediaController_GetMediaItem_Call) Run(run func(id string)) *MockMediaController_GetMediaItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMediaController_GetMediaItem_Call) Return(mediaItemWithMetadata *models.MediaItemWithMetadata, err error) *MockMediaController_GetMediaItem_Call {
	_c.Call.Return(mediaItemWithMetadata, err)
	return _c
}

func (_c *MockMediaController_GetMediaItem_Call) RunAndReturn(run func(id string) (*models.MediaItemWithMetadata, error)) *MockMediaController_GetMediaItem_Call {
	_c.Call.Return(run)
	return _c
}

// GetMediaItemCount provides a mock function for the type MockMediaController
func (_mock *MockMediaController) GetMediaItemCount(P models.SearchPrefs) int64 {
	ret := _mock.Called(P)

	if len(ret) == 0 {
		panic("no return value specified for GetMediaItemCount")
	}

	var r0 int64
	if returnFunc, ok := ret.Get(0).(func(models.SearchPrefs) int64); ok {
		r0 = returnFunc(P)
	} else {
		r0 = ret.Get(0).(int64)
	}
	return r0
}

// MockMediaController_GetMediaItemCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMediaItemCount'
type MockMediaController_GetMediaItemCount_Call struct {
	*mock.Call
}

// GetMediaItemCount is a helper method to define mock.On call
//   - P models.SearchPrefs
func (_e *MockMediaController_Expecter) GetMediaItemCount(P interface{}) *MockMediaController_GetMediaItemCount_Call {
	return &MockMediaController_GetMediaItemCount_Call{Call: _e.mock.On("GetMediaItemCount", P)}
}

func (_c *MockMediaController_GetMediaItemCount_Call) Run(run func(P models.SearchPrefs)) *MockMediaController_GetMediaItemCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 models.SearchPrefs
		if args[0] != nil {
			arg0 = args[0].(models.SearchPrefs)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMediaController_GetMediaItemCount_Call) Return(n int64) *MockMediaController_GetMediaItemCount_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockMediaController_GetMediaItemCount_Call) RunAndReturn(run func(P models.SearchPrefs) int64) *MockMediaController_GetMediaItemCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetPaginatedMediaItemIds provides a mock function for the type MockMediaController
func (_mock *MockMediaController) GetPaginatedMediaItemIds(page int, itemsPerPage int, P models.SearchPrefs) ([]models.MediaItemID, error) {
	ret := _mock.Called(page, itemsPerPage, P)

	if len(ret) == 0 {
		panic("no return value specified for GetPaginatedMediaItemIds")
	}

	var r0 []models.MediaItemID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int, int, models.SearchPrefs) ([]models.MediaItemID, error)); ok {
		return returnFunc(page, itemsPerPage, P)
	}
	if returnFunc, ok := ret.Get(0).(func(int, int, models.SearchPrefs) []models.MediaItemID); ok {
		r0 = returnFunc(page, itemsPerPage, P)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.MediaItemID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int, int, models.SearchPrefs) error); ok {
		r1 = returnFunc(page, itemsPerPage, P)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMediaController_GetPaginatedMediaItemIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPaginatedMediaItemIds'
type MockMediaController_GetPaginatedMediaItemIds_Call struct {
	*mock.Call
}

// GetPaginatedMediaItemIds is a helper method to define mock.On call
//   - page int
//   - itemsPerPage int
//   - P models.SearchPrefs
func (_e *MockMediaController_Expecter) GetPaginatedMediaItemIds(page interface{}, itemsPerPage interface{}, P interface{}) *MockMediaController_GetPaginatedMediaItemIds_Call {
	return &MockMediaController_GetPaginatedMediaItemIds_Call{Call: _e.mock.On("GetPaginatedMediaItemIds", page, itemsPerPage, P)}
}

func (_c *MockMediaController_GetPaginatedMediaItemIds_Call) Run(run func(page int, itemsPerPage int, P models.SearchPrefs)) *MockMediaController_GetPaginatedMediaItemIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 models.SearchPrefs
		if args[2] != nil {
			arg2 = args[2].(models.SearchPrefs)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockMediaController_GetPaginatedMediaItemIds_Call) Return(mediaItemIDs []models.MediaItemID, err error) *MockMediaController_GetPaginatedMediaItemIds_Call {
	_c.Call.Return(mediaItemIDs, err)
	return _c
}

func (_c *MockMediaController_GetPaginatedMediaItemIds_Call) RunAndReturn(run func(page int, itemsPerPage int, P models.SearchPrefs) ([]models.MediaItemID, error)) *MockMediaController_GetPaginatedMediaItemIds_Call {
	_c.Call.Return(run)
	return _c
}

// GetPaginatedMediaItems provides a mock function for the type MockMediaController
func (_mock *MockMediaController) GetPaginatedMediaItems(page int, itemsPerPage int, P models.SearchPrefs) ([]models.MediaItemWithMetadata, error) {
	ret := _mock.Called(page, itemsPerPage, P)

	if len(ret) == 0 {
		panic("no return value specified for GetPaginatedMediaItems")
	}

	var r0 []models.MediaItemWithMetadata
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int, int, models.SearchPrefs) ([]models.MediaItemWithMetadata, error)); ok {
		return returnFunc(page, itemsPerPage, P)
	}
	if returnFunc, ok := ret.Get(0).(func(int, int, models.SearchPrefs) []models.MediaItemWithMetadata); ok {
		r0 = returnFunc(page, itemsPerPage, P)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.MediaItemWithMetadata)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int, int, models.SearchPrefs) error); ok {
		r1 = returnFunc(page, itemsPerPage, P)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMediaController_GetPaginatedMediaItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPaginatedMediaItems'
type MockMediaController_GetPaginatedMediaItems_Call struct {
	*mock.Call
}

// GetPaginatedMediaItems is a helper method to define mock.On call
//   - page int
//   - itemsPerPage int
//   - P models.SearchPrefs
func (_e *MockMediaController_Expecter) GetPaginatedMediaItems(page interface{}, itemsPerPage interface{}, P interface{}) *MockMediaController_GetPaginatedMediaItems_Call {
	return &MockMediaController_GetPaginatedMediaItems_Call{Call: _e.mock.On("GetPaginatedMediaItems", page, itemsPerPage, P)}
}

func (_c *MockMediaController_GetPaginatedMediaItems_Call) Run(run func(page int, itemsPerPage int, P models.SearchPrefs)) *MockMediaController_GetPaginatedMediaItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 models.SearchPrefs
		if args[2] != nil {
			arg2 = args[2].(models.SearchPrefs)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockMediaController_GetPaginatedMediaItems_Call) Return(mediaItemWithMetadatas []models.MediaItemWithMetadata, err error) *MockMediaController_GetPaginatedMediaItems_Call {
	_c.Call.Return(mediaItemWithMetadatas, err)
	return _c
}

func (_c *MockMediaController_GetPaginatedMediaItems_Call) RunAndReturn(run func(page int, itemsPerPage int, P models.SearchPrefs) ([]models.MediaItemWithMetadata, error)) *MockMediaController_GetPaginatedMediaItems_Call {
	_c.Call.Return(run)
	return _c
}

// GetThumbnail provides a mock function for the type MockMediaController
func (_mock *MockMediaController) GetThumbnail(mediaItemID string) (string, error) {
	ret := _mock.Called(mediaItemID)

	if len(ret) == 0 {
		panic("no return value specified for GetThumbnail")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(mediaItemID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(mediaItemID)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(mediaItemID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMediaController_GetThumbnail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetThumbnail'
type MockMediaController_GetThumbnail_Call struct {
	*mock.Call
}

// GetThumbnail is a helper method to define mock.On call
//   - mediaItemID string
func (_e *MockMediaController_Expecter) GetThumbnail(mediaItemID interface{}) *MockMediaController_GetThumbnail_Call {
	return &MockMediaController_GetThumbnail_Call{Call: _e.mock.On("GetThumbnail", mediaItemID)}
}

func (_c *MockMediaController_GetThumbnail_Call) Run(run func(mediaItemID string)) *MockMediaController_GetThumbnail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMediaController_GetThumbnail_Call) Return(s string, err error) *MockMediaController_GetThumbnail_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockMediaController_GetThumbnail_Call) RunAndReturn(run func(mediaItemID string) (string, error)) *MockMediaController_GetThumbnail_Call {
	_c.Call.Return(run)
	return _c
}

// GetTotalMediaItems provides a mock function for the type MockMediaController
func (_mock *MockMediaController) GetTotalMediaItems() int64 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTotalMediaItems")
	}

	var r0 int64
	if returnFunc, ok := ret.Get(0).(func() int64); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int64)
	}
	return r0
}

// MockMediaController_GetTotalMediaItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTotalMediaItems'
type MockMediaController_GetTotalMediaItems_Call struct {
	*mock.Call
}

// GetTotalMediaItems is a helper method to define mock.On call
func (_e *MockMediaController_Expecter) GetTotalMediaItems() *MockMediaController_GetTotalMediaItems_Call {
	return &MockMediaController_GetTotalMediaItems_Call{Call: _e.mock.On("GetTotalMediaItems")}
}

func (_c *MockMediaController_GetTotalMediaItems_Call) Run(run func()) *MockMediaController_GetTotalMediaItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMediaController_GetTotalMediaItems_Call) Return(n int64) *MockMediaController_GetTotalMediaItems_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockMediaController_GetTotalMediaItems_Call) RunAndReturn(run func() int64) *MockMediaController_GetTotalMediaItems_Call {
	_c.Call.Return(run)
	return _c
}

// RecycleAndGetNext provides a mock function for the type MockMediaController
func (_mock *MockMediaController) RecycleAndGetNext(mediaItem *models.MediaItem, page int, P models.SearchPrefs) (*models.MediaItemWithMetadata, error) {
	ret := _mock.Called(mediaItem, page, P)

	if len(ret) == 0 {
		panic("no return value specified for RecycleAndGetNext")
	}

	var r0 *models.MediaItemWithMetadata
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*models.MediaItem, int, models.SearchPrefs) (*models.MediaItemWithMetadata, error)); ok {
		return returnFunc(mediaItem, page, P)
	}
	if returnFunc, ok := ret.Get(0).(func(*models.MediaItem, int, models.SearchPrefs) *models.MediaItemWithMetadata); ok {
		r0 = returnFunc(mediaItem, page, P)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.MediaItemWithMetadata)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*models.MediaItem, int, models.SearchPrefs) error); ok {
		r1 = returnFunc(mediaItem, page, P)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMediaController_RecycleAndGetNext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecycleAndGetNext'
type MockMediaController_RecycleAndGetNext_Call struct {
	*mock.Call
}

// RecycleAndGetNext is a helper method to define mock.On call
//   - mediaItem *models.MediaItem
//   - page int
//   - P models.SearchPrefs
func (_e *MockMediaController_Expecter) RecycleAndGetNext(mediaItem interface{}, page interface{}, P interface{}) *MockMediaController_RecycleAndGetNext_Call {
	return &MockMediaController_RecycleAndGetNext_Call{Call: _e.mock.On("RecycleAndGetNext", mediaItem, page, P)}
}

func (_c *MockMediaController_RecycleAndGetNext_Call) Run(run func(mediaItem *models.MediaItem, page int, P models.SearchPrefs)) *MockMediaController_RecycleAndGetNext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *models.MediaItem
		if args[0] != nil {
			arg0 = args[0].(*models.MediaItem)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 models.SearchPrefs
		if args[2] != nil {
			arg2 = args[2].(models.SearchPrefs)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockMediaController_RecycleAndGetNext_Call) Return(mediaItemWithMetadata *models.MediaItemWithMetadata, err error) *MockMediaController_RecycleAndGetNext_Call {
	_c.Call.Return(mediaItemWithMetadata, err)
	return _c
}

func (_c *MockMediaController_RecycleAndGetNext_Call) RunAndReturn(run func(mediaItem *models.MediaItem, page int, P models.SearchPrefs) (*models.MediaItemWithMetadata, error)) *MockMediaController_RecycleAndGetNext_Call {
	_c.Call.Return(run)
	return _c
}

// RecycleMediaItem provides a mock function for the type MockMediaController
func (_mock *MockMediaController) RecycleMediaItem(mediaItem models.MediaItem) error {
	ret := _mock.Called(mediaItem)

	if len(ret) == 0 {
		panic("no return value specified for RecycleMediaItem")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(models.MediaItem) error); ok {
		r0 = returnFunc(mediaItem)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMediaController_RecycleMediaItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecycleMediaItem'
type MockMediaController_RecycleMediaItem_Call struct {
	*mock.Call
}

// RecycleMediaItem is a helper method to define mock.On call
//   - mediaItem models.MediaItem
func (_e *MockMediaController_Expecter) RecycleMediaItem(mediaItem interface{}) *MockMediaController_RecycleMediaItem_Call {
	return &MockMediaController_RecycleMediaItem_Call{Call: _e.mock.On("RecycleMediaItem", mediaItem)}
}

func (_c *MockMediaController_RecycleMediaItem_Call) Run(run func(mediaItem models.MediaItem)) *MockMediaController_RecycleMediaItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 models.MediaItem
		if args[0] != nil {
			arg0 = args[0].(models.MediaItem)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMediaController_RecycleMediaItem_Call) Return(err error) *MockMediaController_RecycleMediaItem_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMediaController_RecycleMediaItem_Call) RunAndReturn(run func(mediaItem models.MediaItem) error) *MockMediaController_RecycleMediaItem_Call {
	_c.Call.Return(run)
	return _c
}

// ToggleFavorite provides a mock function for the type MockMediaController
func (_mock *MockMediaController) ToggleFavorite(id string) (*models.MediaItemWithMetadata, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for ToggleFavorite")
	}

	var r0 *models.MediaItemWithMetadata
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*models.MediaItemWithMetadata, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *models.MediaItemWithMetadata); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.MediaItemWithMetadata)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMediaController_ToggleFavorite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToggleFavorite'
type MockMediaController_ToggleFavorite_Call struct {
	*mock.Call
}

// ToggleFavorite is a helper method to define mock.On call
//   - id string
func (_e *MockMediaController_Expecter) ToggleFavorite(id interface{}) *MockMediaController_ToggleFavorite_Call {
	return &MockMediaController_ToggleFavorite_Call{Call: _e.mock.On("ToggleFavorite", id)}
}

func (_c *MockMediaController_ToggleFavorite_Call) Run(run func(id string)) *MockMediaController_ToggleFavorite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMediaController_ToggleFavorite_Call) Return(mediaItemWithMetadata *models.MediaItemWithMetadata, err error) *MockMediaController_ToggleFavorite_Call {
	_c.Call.Return(mediaItemWithMetadata, err)
	return _c
}

func (_c *MockMediaController_ToggleFavorite_Call) RunAndReturn(run func(id string) (*models.MediaItemWithMetadata, error)) *MockMediaController_ToggleFavorite_Call {
	_c.Call.Return(run)
	return _c
}

// UndoLastDeleted provides a mock function for the type MockMediaController
func (_mock *MockMediaController) UndoLastDeleted() (*models.MediaItemWithMetadata, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for UndoLastDeleted")
	}

	var r0 *models.MediaItemWithMetadata
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*models.MediaItemWithMetadata, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *models.MediaItemWithMetadata); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.MediaItemWithMetadata)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMediaController_UndoLastDeleted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UndoLastDeleted'
type MockMediaController_UndoLastDeleted_Call struct {
	*mock.Call
}

// UndoLastDeleted is a helper method to define mock.On call
func (_e *MockMediaController_Expecter) UndoLastDeleted() *MockMediaController_UndoLastDeleted_Call {
	return &MockMediaController_UndoLastDeleted_Call{Call: _e.mock.On("UndoLastDeleted")}
}

func (_c *MockMediaController_UndoLastDeleted_Call) Run(run func()) *MockMediaController_UndoLastDeleted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMediaController_UndoLastDeleted_Call) Return(mediaItemWithMetadata *models.MediaItemWithMetadata, err error) *MockMediaController_UndoLastDeleted_Call {
	_c.Call.Return(mediaItemWithMetadata, err)
	return _c
}

func (_c *MockMediaController_UndoLastDeleted_Call) RunAndReturn(run func() (*models.MediaItemWithMetadata, error)) *MockMediaController_UndoLastDeleted_Call {
	_c.Call.Return(run)
	return _c
}
